// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String            @id @default(cuid())
    name             String?
    email            String?           @unique
    emailVerified    DateTime?
    image            String?
    username         String?           @unique
    accounts         Account[]
    sessions         Session[]
    memberships      Membership[]
    picks            Pick[]
    eventSubmissions EventSubmission[]
    Group            Group[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Membership {
    userId  String
    groupId String
    User    User   @relation(fields: [userId], references: [id])
    Group   Group  @relation(fields: [groupId], references: [id])

    @@id([userId, groupId])
}

model Group {
    id         String       @id @default(cuid())
    ownerId    String
    title      String
    slug       String       @unique
    numMembers Int          @default(1)
    createdAt  DateTime     @default(now())
    Membership Membership[]
    Owner      User         @relation(fields: [ownerId], references: [id])
}

model Pick {
    id              String  @id @default(cuid())
    userId          String
    fightId         String
    fighterPickedId String
    User            User    @relation(fields: [userId], references: [id])
    Fight           Fight   @relation(fields: [fightId], references: [id])
    FighterPicked   Fighter @relation(fields: [fighterPickedId], references: [id])
}

model Fight {
    id      String @id @default(cuid())
    eventId String

    fighters Fighter[]
    picks    Pick[]
    Event    Event     @relation(fields: [eventId], references: [id])
}

model Fighter {
    id         String  @id @default(cuid())
    fname      String
    lname      String
    wins       Int     @default(0)
    losses     Int     @default(0)
    draws      Int     @default(0)
    noContests Int     @default(0)
    weight     String
    height     String
    Fight      Fight[]
    Pick       Pick[]
}

model EventSubmission {
    id      String @id @default(cuid())
    eventId String
    userId  String
    Event   Event  @relation(fields: [eventId], references: [id])
    User    User   @relation(fields: [userId], references: [id])
}

model Event {
    id        String   @id @default(cuid())
    title     String
    mainEvent String
    date      DateTime
    promotion String
    venue     String
    location  String

    fights          Fight[]
    EventSubmission EventSubmission[]
}
